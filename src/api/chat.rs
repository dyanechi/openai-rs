use std::collections::HashMap;

use crate::{*, completions::Completion, request::ApiRequest};
use super::*;

#[derive(Debug, Serialize, Deserialize)]
pub struct ChatBody {
	/// ID of the model to use.
	/// See the model endpoint compatibility table for details on which models work with the Chat API.
	pub model: String,
	/// The messages to generate chat completions for, in the chat format.
	pub messages: Vec<Message>,
	/// What sampling temperature to use, between 0 and 2.
	/// Higher values like 0.8 will make the output more random,
	/// while lower values like 0.2 will make it more focused and deterministic.
	/// We generally recommend altering this or top_p but not both.
	/// Defaults to 1
	#[serde(skip_serializing_if = "Option::is_none")]
	pub temperature: Option<f32>,
	/// An alternative to sampling with temperature, called nucleus sampling,
	/// where the model considers the results of the tokens with top_p probability mass.
	/// So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	/// We generally recommend altering this or temperature but not both.
	/// Defaults to 1
	#[serde(skip_serializing_if = "Option::is_none")]
	pub top_p: Option<f32>,
	/// How many chat completion choices to generate for each input message.
	/// Defaults to 1
	#[serde(skip_serializing_if = "Option::is_none")]
	pub n: Option<i32>,
	/// If set, partial message deltas will be sent, like in ChatGPT.
	/// Tokens will be sent as data-only server-sent events as they become available,
	/// with the stream terminated by a data: [DONE] message. See the OpenAI Cookbook for example code.
	/// Defaults to false
	#[serde(skip_serializing_if = "Option::is_none")]
	pub stream: Option<bool>,
	/// Up to 4 sequences where the API will stop generating further tokens.
	/// Defaults to null
	#[serde(skip_serializing_if = "Option::is_none")]
	pub stop: Option<Vec<String>>,
	/// The maximum number of tokens to generate in the chat completion.
	/// The total length of input tokens and generated tokens is limited by the model's context length.
	/// Defaults to inf
	#[serde(skip_serializing_if = "Option::is_none")]
	pub max_tokens: Option<i32>,
	/// Number between -2.0 and 2.0.
	/// Positive values penalize new tokens based on whether they appear in the text so far,
	/// increasing the model's likelihood to talk about new topics.
	/// Defaults to 0
	#[serde(skip_serializing_if = "Option::is_none")]
	pub presence_penalty: Option<f32>,
	/// Number between -2.0 and 2.0.
	/// Positive values penalize new tokens based on their existing frequency in the text so far,
	/// decreasing the model's likelihood to repeat the same line verbatim.
	/// Defaults to 0
	#[serde(skip_serializing_if = "Option::is_none")]
	pub frequency_penalty: Option<f32>,
	/// Modify the likelihood of specified tokens appearing in the completion.
	/// Accepts a json object that maps tokens (specified by their token ID in the tokenizer)
	/// to an associated bias value from -100 to 100. Mathematically,
	/// the bias is added to the logits generated by the model prior to sampling.
	/// The exact effect will vary per model, but values between -1 and 1 should
	/// decrease or increase likelihood of selection;
	/// values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	/// Defaults to null
	#[serde(skip_serializing_if = "Option::is_none")]
	pub logit_bias: Option<HashMap<String, String>>,
	/// A unique identifier representing your end-user,
	/// which can help OpenAI to monitor and detect abuse. Learn more.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub user: Option<String>,
}

impl Default for ChatBody {
    fn default() -> Self {
        Self { 
            model: String::from("gpt-3.5-turbo"), 
            messages: vec![], 
            temperature: Some(0.6), 
            top_p: Some(0.2), 
            n: Some(1), 
            stream: None, 
            stop: None, 
            max_tokens: Some(100), 
            presence_penalty: None, 
            frequency_penalty: None, 
            logit_bias: None,
            user: None
        }
    }
}

impl ChatBody {
    pub fn new() -> ChatBodyBuilder {
        ChatBodyBuilder::new()
    }
}

pub struct ChatBodyBuilder {
    inner: ChatBody
}
impl ChatBodyBuilder {
    fn new() -> Self { Self { inner: Default::default() } }
    pub fn build(self) -> ChatBody { self.inner }

    pub fn with_model(mut self, model: impl Into<String>) -> Self { self.inner.model = model.into(); self }
    pub fn with_messages(mut self, messages: Vec<Message>) -> Self { self.inner.messages = messages; self }
    pub fn with_temperature(mut self, temperature: f32) -> Self { self.inner.temperature = Some(temperature); self }
    pub fn with_top_p(mut self, top_p: f32) -> Self { self.inner.top_p = Some(top_p); self }
    pub fn with_n(mut self, n: i32) -> Self { self.inner.n = Some(n); self }
    pub fn with_stream(mut self, stream: bool) -> Self { self.inner.stream = Some(stream); self }
    pub fn with_stop(mut self, stop: Vec<String>) -> Self { self.inner.stop = Some(stop); self }
    pub fn with_max_tokens(mut self, max_tokens: i32) -> Self { self.inner.max_tokens = Some(max_tokens); self }
    pub fn with_presence_penalty(mut self, presence_penalty: f32) -> Self { self.inner.presence_penalty = Some(presence_penalty); self }
    pub fn with_frequency_penalty(mut self, frequency_penalty: f32) -> Self { self.inner.frequency_penalty = Some(frequency_penalty); self }
    pub fn with_logit_bias(mut self, logit_bias: HashMap<String, String>) -> Self { self.inner.logit_bias = Some(logit_bias); self }
    pub fn with_user(mut self, user: String) -> Self { self.inner.user = Some(user); self }
}

pub trait ChatApi {
    fn chat_completion_create(&self, chat_body: &ChatBody) -> ApiResult<Completion>;
}

impl ChatApi for OpenAi {
    fn chat_completion_create(&self, chat_body: &ChatBody) -> ApiResult<Completion> {
        let body = serde_json::to_value(chat_body).unwrap();
        let res = self.post(CHAT_COMPLETION_CREATE, body)?;
        Ok(serde_json::from_value(res.clone()).unwrap())
    }
}